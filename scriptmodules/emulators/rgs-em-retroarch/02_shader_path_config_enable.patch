diff -u a/configuration.c b/configuration.c
--- a/configuration.c	2021-03-28 21:43:18.000000000 +0100
+++ b/configuration.c	2021-04-11 14:16:52.728946770 +0100
@@ -1279,6 +1279,8 @@
          settings->paths.path_core_options, false, NULL, true);
    SETTING_PATH("libretro_info_path",
          settings->paths.path_libretro_info, false, NULL, true);
+   SETTING_PATH("video_shader",
+          settings->paths.path_shader, false, NULL, true);
    SETTING_PATH("content_database_path",
          settings->paths.path_content_database, false, NULL, true);
    SETTING_PATH("cheat_database_path",
@@ -2445,6 +2447,7 @@
    *settings->paths.path_content_music_history   = '\0';
    *settings->paths.path_content_video_history   = '\0';
    *settings->paths.path_cheat_settings    = '\0';
+   *settings->paths.path_shader   = '\0';
 #if !defined(__APPLE__)
    *settings->arrays.bundle_assets_src = '\0';
    *settings->arrays.bundle_assets_dst = '\0';
@@ -4394,6 +4397,10 @@
 
       for (i = 0; i < (unsigned)path_settings_size; i++)
       {
+         /* blacklist video_shader, better handled by shader presets*/
+         if (string_is_equal(path_settings[i].ident, "video_shader"))
+            continue;
+
          if (!string_is_equal(path_settings[i].ptr, path_overrides[i].ptr))
             config_set_path(conf, path_overrides[i].ident,
                   path_overrides[i].ptr);
diff -u a/configuration.h b/configuration.h
--- a/configuration.h	2021-03-28 21:43:18.000000000 +0100
+++ b/configuration.h	2021-04-11 14:18:13.832319614 +0100
@@ -418,6 +418,7 @@
       char path_libretro_info[PATH_MAX_LENGTH];
       char path_cheat_settings[PATH_MAX_LENGTH];
       char path_font[PATH_MAX_LENGTH];
+      char path_shader[PATH_MAX_LENGTH];
       char path_rgui_theme_preset[PATH_MAX_LENGTH];
 
       char directory_audio_filter[PATH_MAX_LENGTH];
diff -u a/retroarch.c b/retroarch.c
--- a/retroarch.c	2021-03-28 21:43:18.000000000 +0100
+++ b/retroarch.c	2021-04-11 14:12:56.279789208 +0100
@@ -36123,6 +36123,7 @@
 {
    unsigned i;
    char shader_path[PATH_MAX_LENGTH];
+   settings_t *settings = p_rarch->configuration_settings;
 
    static enum rarch_shader_type types[] =
    {
@@ -36148,11 +36149,16 @@
          if (string_is_empty(special_name))
             break;
 
-         fill_pathname_join(shader_path, shader_directory,
-               special_name, sizeof(shader_path));
-         strlcat(shader_path,
-               video_shader_get_preset_extension(types[i]),
-               sizeof(shader_path));
+         if (strcmp(special_name, "config")!=0) {
+            fill_pathname_join(shader_path, shader_directory,
+                special_name, sizeof(shader_path));
+            strlcat(shader_path,
+                video_shader_get_preset_extension(types[i]),
+                sizeof(shader_path));
+         } else {
+             RARCH_LOG("[Shaders]: Configuration file shader found.\n");
+             strlcpy(shader_path, settings->paths.path_shader, PATH_MAX_LENGTH);
+         }
       }
 
       if (!path_is_valid(shader_path))
@@ -36177,6 +36183,7 @@
  * Tries to load a supported core-, game-, folder-specific or global
  * shader preset from its respective location:
  *
+ * config:          preset from the configuration file, configured via 'video_shader'
  * global:          $CONFIG_DIR/global.$PRESET_EXT
  * core-specific:   $CONFIG_DIR/$CORE_NAME/$CORE_NAME.$PRESET_EXT
  * folder-specific: $CONFIG_DIR/$CORE_NAME/$FOLDER_NAME.$PRESET_EXT
@@ -36258,6 +36265,11 @@
             dirs[i], NULL,
             "global"))
          return true;
+
+      /* Configuration file shader path found? */
+      if (retroarch_load_shader_preset_internal(p_rarch, dirs[i], NULL,
+           "config"))
+         return true;         
    }
    return false;
 }
